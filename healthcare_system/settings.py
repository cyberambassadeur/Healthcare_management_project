# healthcare_system/settings.py

"""
Django settings for healthcare_system project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# It's best practice to also load this from an environment variable in production
SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-$9@!2^unfnw3317c@n60#i9o$wph71&!)!w&=1-#io__*yulm)")
ENCRYPTION_KEY = os.getenv('ENCRYPTION_KEY', 'a_default_encryption_key_for_dev_only').encode() # Fallback for dev

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost'] # Add your production domain here later

# Security settings - Good choices!
# SECURE_SSL_REDIRECT = False # Set to True in production after configuring HTTPS
# SESSION_COOKIE_SECURE = False # Set to True in production (requires HTTPS)
# CSRF_COOKIE_SECURE = False # Set to True in production (requires HTTPS)
# SESSION_COOKIE_AGE = 900    # 15-minute timeout
AUTH_USER_MODEL = 'users.CustomUser' # Your custom user model

# Django-Axes settings for brute force protection
AXES_FAILURE_LIMIT = 10  # Increased from 5 to 10 attempts
AXES_COOLOFF_TIME = 0.25  # 15 minutes lockout (0.25 hours)
AXES_LOCKOUT_TEMPLATE = 'lockout.html'  # Fixed template path
AXES_BEHIND_REVERSE_PROXY = False  # Set to True if you're behind a proxy (e.g., Nginx)
AXES_LOCKOUT_BY_COMBINATION_USER_AND_IP = True  # Lock by both username and IP
AXES_RESET_ON_SUCCESS = True  # Reset failure count on successful login

# HSTS (HTTP Strict Transport Security) - Enable in production with HTTPS
# SECURE_HSTS_SECONDS = 31536000  # 1 year
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True

# X-Content-Type-Options: Prevents browsers from MIME-sniffing a response away from the declared content-type
SECURE_CONTENT_TYPE_NOSNIFF = True

# X-Frame-Options: Prevents clickjacking
X_FRAME_OPTIONS = 'DENY'

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "crispy_forms",
    "crispy_bootstrap5",
    "axes",
    "core",
    "users",
    "patients",
    "appointments",
    "medical_records",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'core.middleware.UserRoleMiddleware',
    'axes.middleware.AxesMiddleware',
]

ROOT_URLCONF = "healthcare_system.urls"

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesBackend', # Axes must be before ModelBackend
    'django.contrib.auth.backends.ModelBackend',
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates'], # Added a project-level templates directory
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug", # Good for development
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "healthcare_system.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC" # Consider setting this to your local timezone, e.g., 'Africa/Douala' for Cameroon

USE_I18N = True

USE_TZ = True # Very important for accurate timestamping in databases

# Crispy Forms Settings
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / 'staticfiles' # For collecting static files in production

# Media files (User-uploaded content like images)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom Login/Logout URLs
LOGIN_URL = '/accounts/login/' # Ensure this matches your login URL
LOGIN_REDIRECT_URL = '/' # Where to redirect after successful login (e.g., a dashboard)
LOGOUT_REDIRECT_URL = '/accounts/login/' # Where to redirect after logout

# Email configuration for development
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Prints emails to console in development
EMAIL_HOST = 'localhost'
EMAIL_PORT = 1025
EMAIL_USE_TLS = False
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''

# For production, you would use:
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'  # or your SMTP server
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your-email@gmail.com'
# EMAIL_HOST_PASSWORD = 'your-app-password'

# Logging configuration for security monitoring
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'healthcare.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'core.middleware': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Create logs directory if it doesn't exist
import os
logs_dir = BASE_DIR / 'logs'
logs_dir.mkdir(exist_ok=True)